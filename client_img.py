from pygame import *
import socket
import json
from threading import Thread
import os

# ---PYGAME –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ---
WIDTH, HEIGHT = 800, 600
init()
screen = display.set_mode((WIDTH, HEIGHT))
clock = time.Clock()
display.set_caption("–ü—ñ–Ω–≥-–ü–æ–Ω–≥")

# ---–°–ï–†–í–ï–† ---
def connect_to_server():
    while True:
        try:
            client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            client.connect(('localhost', 8080)) # ---- –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞
            buffer = ""
            game_state = {}
            my_id = int(client.recv(24).decode())
            return my_id, game_state, buffer, client
        except:
            pass

def receive():
    global buffer, game_state, game_over
    while not game_over:
        try:
            data = client.recv(1024).decode()
            buffer += data
            while "\n" in buffer:
                packet, buffer = buffer.split("\n", 1)
                if packet.strip():
                    game_state = json.loads(packet)
        except:
            game_state["winner"] = -1
            break

# --- –®–†–ò–§–¢–ò ---
font_win = font.Font(None, 72)
font_main = font.Font(None, 36)

# === –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –ó–û–ë–†–ê–ñ–ï–ù–¨ ===
# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
def load_image_safe(path, size=None):
    try:
        img = image.load(path)
        if size:
            img = transform.scale(img, size)
        return img.convert_alpha()  # convert_alpha() –¥–ª—è –ø—Ä–æ–∑–æ—Ä–æ—Å—Ç—ñ —Ç–∞ —à–≤–∏–¥–∫–æ—Å—Ç—ñ
    except:
        print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ {path}")
        return None

print("üé® –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è...")

# === –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –§–û–ù–û–í–ò–• –ó–û–ë–†–ê–ñ–ï–ù–¨ ===
# –§–æ–Ω –æ—Å–Ω–æ–≤–Ω–æ—ó –≥—Ä–∏
game_bg = load_image_safe('images/backgrounds/game_bg.jpg', (WIDTH, HEIGHT))
if game_bg is None:
    # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞—Ä–∏–π —Ñ–æ–Ω
    try:
        game_bg = image.load('images/backgrounds/game_bg.jpg')
        game_bg = transform.scale(game_bg, (WIDTH, HEIGHT))
    except:
        print("‚ö†Ô∏è –§–æ–Ω–æ–≤–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        game_bg = None

# –§–æ–Ω –µ–∫—Ä–∞–Ω—É –ø–µ—Ä–µ–º–æ–≥–∏
win_bg = load_image_safe('images/backgrounds/win_bg.jpg', (800, 600))

# === –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –Ü–ì–†–û–í–ò–• –ï–õ–ï–ú–ï–ù–¢–Ü–í ===
# –ú'—è—á - —Ç–µ–ø–µ—Ä —Ü–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–º—ñ—Å—Ç—å –±—ñ–ª–æ–≥–æ –∫–æ–ª–∞
ball_img = load_image_safe('images/game_elements/ball.png', (20, 20))

# –†–∞–∫–µ—Ç–∫–∞ –≥—Ä–∞–≤—Ü—è 1 (–ª—ñ–≤–∞)
paddle1_img = load_image_safe('images/game_elements/paddle1.png', (20, 100))

# –†–∞–∫–µ—Ç–∫–∞ –≥—Ä–∞–≤—Ü—è 2 (–ø—Ä–∞–≤–∞)
paddle2_img = load_image_safe('images/game_elements/paddle2.png', (20, 100))

print("‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

# --- –ó–í–£–ö–ò ---
# (–¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–≤—É–∫–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤)

# --- –ì–†–ê ---
game_over = False
winner = None
you_winner = None
my_id, game_state, buffer, client = connect_to_server()
Thread(target=receive, daemon=True).start()

while True:
    for e in event.get():
        if e.type == QUIT:
            exit()

    # === –í–Ü–î–û–ë–†–ê–ñ–ï–ù–ù–Ø –§–û–ù–£ ===
    if game_bg:
        screen.blit(game_bg, (0, 0))
    else:
        screen.fill((30, 30, 30))  # –¢–µ–º–Ω–∏–π —Ñ–æ–Ω —è–∫ —Ä–µ–∑–µ—Ä–≤

    # === –ï–ö–†–ê–ù –í–Ü–î–õ–Ü–ö–£ ===
    if "countdown" in game_state and game_state["countdown"] > 0:
        countdown_text = font.Font(None, 72).render(str(game_state["countdown"]), True, (255, 255, 255))
        screen.blit(countdown_text, (WIDTH // 2 - 20, HEIGHT // 2 - 30))
        display.update()
        continue  # –ù–µ –º–∞–ª—é—î–º–æ –≥—Ä—É –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—ñ–¥–ª—ñ–∫—É

    # === –ï–ö–†–ê–ù –ü–ï–†–ï–ú–û–ì–ò ===
    if "winner" in game_state and game_state["winner"] is not None:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π —Ñ–æ–Ω –¥–ª—è –ø–µ—Ä–µ–º–æ–≥–∏ –∞–±–æ —Ç–µ–º–Ω–∏–π —Ñ–æ–Ω
        if win_bg:
            screen.blit(win_bg, (0, 0))
        else:
            screen.fill((20, 20, 20))

        if you_winner is None:  # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ–¥–∏–Ω —Ä–∞–∑
            if game_state["winner"] == my_id:
                you_winner = True
            else:
                you_winner = False

        if you_winner:
            text = "–¢–∏ –ø–µ—Ä–µ–º—ñ–≥!"
        else:
            text = "–ü–æ—â–∞—Å—Ç–∏—Ç—å –Ω–∞—Å—Ç—É–ø–Ω–∏–º —Ä–∞–∑–æ–º!"

        win_text = font_win.render(text, True, (255, 215, 0))
        text_rect = win_text.get_rect(center=(WIDTH // 2, HEIGHT // 2))
        screen.blit(win_text, text_rect)

        text = font_win.render('–ö - —Ä–µ—Å—Ç–∞—Ä—Ç', True, (255, 215, 0))
        text_rect = text.get_rect(center=(WIDTH // 2, HEIGHT // 2 + 120))
        screen.blit(text, text_rect)

        display.update()
        continue  # –ë–ª–æ–∫—É—î –≥—Ä—É –ø—ñ—Å–ª—è –ø–µ—Ä–µ–º–æ–≥–∏

    # === –û–°–ù–û–í–ù–ê –ì–†–ê ===
    if game_state:
        # === –ú–ê–õ–Æ–í–ê–ù–ù–Ø –†–ê–ö–ï–¢–û–ö ===
        # –õ—ñ–≤–∞ —Ä–∞–∫–µ—Ç–∫–∞ (–≥—Ä–∞–≤–µ—Ü—å 0)
        if paddle1_img:
            screen.blit(paddle1_img, (20, game_state['paddles']['0']))
        else:
            draw.rect(screen, (0, 255, 0), (20, game_state['paddles']['0'], 20, 100))

        # –ü—Ä–∞–≤–∞ —Ä–∞–∫–µ—Ç–∫–∞ (–≥—Ä–∞–≤–µ—Ü—å 1)
        if paddle2_img:
            screen.blit(paddle2_img, (WIDTH - 40, game_state['paddles']['1']))
        else:
            draw.rect(screen, (255, 0, 255), (WIDTH - 40, game_state['paddles']['1'], 20, 100))

        # === –ú–ê–õ–Æ–í–ê–ù–ù–Ø –ú'–Ø–ß–ê ===
        if ball_img:
            screen.blit(ball_img, (game_state['ball']['x'] - 10, game_state['ball']['y'] - 10))
        else:
            draw.circle(screen, (255, 255, 255), (game_state['ball']['x'], game_state['ball']['y']), 10)

        # === –ú–ê–õ–Æ–í–ê–ù–ù–Ø –†–ê–•–£–ù–ö–£ ===
        score_text = font_main.render(f"{game_state['scores'][0]} : {game_state['scores'][1]}", True, (255, 255, 255))
        screen.blit(score_text, (WIDTH // 2 -25, 20))

        # === –ó–í–£–ö–û–í–Ü –ü–û–î–Ü–á (–ë–ï–ó –í–Ü–ó–£–ê–õ–¨–ù–ò–• –ï–§–ï–ö–¢–Ü–í) ===
        if game_state['sound_event']:
            if game_state['sound_event'] == 'wall_hit':
                # –∑–≤—É–∫ –≤—ñ–¥–±–∏—Ç—Ç—è –º'—è—á–∏–∫–∞ –≤—ñ–¥ —Å—Ç—ñ–Ω
                pass
            if game_state['sound_event'] == 'platform_hit':
                # –∑–≤—É–∫ –≤—ñ–¥–±–∏—Ç—Ç—è –º'—è—á–∏–∫–∞ –≤—ñ–¥ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏
                pass

    else:
        # === –ï–ö–†–ê–ù –û–ß–Ü–ö–£–í–ê–ù–ù–Ø ===
        waiting_text = font_main.render(f"–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≥—Ä–∞–≤—Ü—ñ–≤...", True, (255, 255, 255))
        screen.blit(waiting_text, (WIDTH // 2 - 125, HEIGHT // 2))

    display.update()
    clock.tick(60)

    # –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è (–±–µ–∑ –∑–º—ñ–Ω)
    keys = key.get_pressed()
    if keys[K_w]:
        client.send(b"UP")
    elif keys[K_s]:
        client.send(b"DOWN")